@inherits LayoutComponentBase

<MudDialogProvider />
<MudSnackbarProvider />
<MudThemeProvider @ref="_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode" Theme="_theme" />

<MudLayout Style="@($"background-color:{(_isDarkMode ? _theme.PaletteDark.Background.Value : Colors.Grey.Lighten4)};")">
    <AuthorizeView>
        <Authorized>
            <MudDrawerContainer>
                <MudDrawer @bind-Open="@_drawerOpen" Variant="@DrawerVariant.Responsive" Elevation="1">
                    <MudDrawerHeader Class="pa-0">
                        <MudStack Justify="Justify.Center" Spacing="0">
                            <MudText Typo="Typo.h6" Class="px-4">ERP XCore</MudText>
                            <MudText Typo="Typo.body2" Class="px-4 mud-text-secondary">Hotelería</MudText>
                        </MudStack>
                    </MudDrawerHeader>

                    <MudDivider />

                    <MudStack Row="true" Spacing="2" Justify="Justify.FlexStart" AlignItems="AlignItems.Center" Class="px-4 py-2">
                        <MudAvatar Size="Size.Medium" Color="Color.Secondary">@context.User.Identity?.Name!.FirstOrDefault()</MudAvatar>
                        <MudStack Justify="Justify.Center" Spacing="0">
                            <MudText Typo="Typo.subtitle1">@context.User.Identity?.Name!.Split("@").FirstOrDefault()</MudText>
                            <MudText Typo="Typo.caption">@context.User.Identity?.Name!</MudText>
                        </MudStack>
                    </MudStack>

                    <MudDivider />

                    <AppNavMenu />
                </MudDrawer>

                <MudMainContent Class="pt-16 px-16 overflow-scroll" Style="max-height: 100vh;">
                    <MudAppBar Elevation="1">
                        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
                        <MudSpacer />
                        <MudStack Row="true">
                            <MudSwitch @bind-Checked="@_isDarkMode" Color="Color.Primary" Class="ma-4" T="bool" ThumbIcon="@(_isDarkMode ? Icons.Material.Filled.DarkMode : Icons.Material.Filled.LightMode)" Label="Tema" />
                            <MudBadge Content="3" Overlap="true" Color="Color.Secondary" Bordered="false" Class="my-6">
                                <MudIconButton Icon="@Icons.Material.Filled.Notifications" Color="Color.Inherit" Class="ma-n3" />
                            </MudBadge>
                        </MudStack>
                    </MudAppBar>

                    <MudContainer Class="mt-6 mb-2" MaxWidth="MaxWidth.Large">
                        @Body
                    </MudContainer>
                </MudMainContent>
            </MudDrawerContainer>
        </Authorized>
        <Authorizing>
            <MudContainer Class="mud-height-full d-flex justify-center align-center">
                <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
            </MudContainer>
        </Authorizing>
        <NotAuthorized>
            @Body
        </NotAuthorized>
    </AuthorizeView>
</MudLayout>

@code {
    [CascadingParameter]
    protected Task<AuthenticationState> AuthStat { get; set; }

    [Inject]
    NavigationManager NavigationManager { get; set; }

    private Permission[] Permissions { get; set; }

    private List<Module> Modules { get; set; }

    private MudThemeProvider _mudThemeProvider = new();
    private MudTheme _theme = new();
    private bool _isAdmin;
    private bool _drawerOpen = true;
    private bool _isDarkMode;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        var user = (await AuthStat).User;
        _isAdmin = user.Identity.Name == "sysadmin@erpxcore.com";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            StateHasChanged();
        }
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
}