@page "/rack"
@using ERP.XCore.Core.Helpers;
@using ERP.XCore.Entities.Models
@using ERP.XCore.Hotel.Shared.Helpers
@using ERP.XCore.Hotel.Shared.Resources.Base
@using ERP.XCore.Hotel.Shared.Resources.Rack
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject HttpClient Http
@inject NavigationManager Navigation
@attribute [Authorize]

<PageTitle>Rack de Habitaciones</PageTitle>

<MudPaper Elevation="1" Class="pa-4">
    <MudText Typo="Typo.h3">Rack de Habitaciones</MudText>

    <MudDivider />

    <MudStack Row="true" Class="mt-2">
        <MudSelect T="Guid?" @bind-Value="FilterType" Label="Tipo de Habitación" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
            <MudSelectItem T="Guid?" Value="@null">Todos</MudSelectItem>
            @foreach (var item in RoomTypes!)
            {
                <MudSelectItem T="Guid?" Value="@item.Value">@item.Text</MudSelectItem>
            }
        </MudSelect>
        <MudSelect T="Guid?" @bind-Value="FilterStatus" Label="Estado de Habitación" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
            <MudSelectItem T="Guid?" Value="@null">Todos</MudSelectItem>
            @foreach (var item in RoomStatus!)
            {
                <MudSelectItem T="Guid?" Value="@item.Value">@item.Text</MudSelectItem>
            }
        </MudSelect>
    </MudStack>

    <MudGrid Class="mt-2">
        <MudItem xs="2" md="3">
            <MudStack Row="true">
                <MudImage Src="media/avro.png" Height="25" />
                <MudText>Disponibles: @AvailableCount</MudText>
            </MudStack>
        </MudItem>
        <MudItem xs="2" md="3">
            <MudStack Row="true">
                <MudImage Src="media/ocro.png" Height="25" />
                <MudText>Ocupadas: @BusyCount</MudText>
            </MudStack>
        </MudItem>
        <MudItem xs="2" md="3">
            <MudStack Row="true">
                <MudImage Src="media/debt.png" Height="25" />
                <MudText>Con Deuda: @InDebtCount</MudText>
            </MudStack>
        </MudItem>
        <MudItem xs="2" md="3">
            <MudStack Row="true">
                <MudImage Src="media/diro.png" Height="25" />
                <MudText>Sucias: @DirtyCount</MudText>
            </MudStack>
        </MudItem>
        <MudItem xs="2" md="3">
            <MudStack Row="true">
                <MudImage Src="media/clro.png" Height="25" />
                <MudText>En Limpieza: @CleaningCount</MudText>
            </MudStack>
        </MudItem>
        <MudItem xs="2" md="3">
            <MudStack Row="true">
                <MudImage Src="media/mnto.png" Height="25" />
                <MudText>En Mantenimiento: @MaintenanceCount</MudText>
            </MudStack>
        </MudItem>
    </MudGrid>

    <MudGrid Class="mt-2">
        @foreach (var item in ItemsList)
        {
            <MudItem xs="2">
                <MudCard @onclick="() => ShowModalAsync(item)" Class="cursor-pointer">
                    <MudCardContent>
                        <MudStack AlignItems="AlignItems.Center">
                            <MudImage Src="@(item.RoomStatus.Description == "Disponible" ? "media/avro.png" : item.RoomStatus.Description == "Ocupado" ? "media/ocro.png" : item.RoomStatus.Description == "Con Deuda" ? "media/debt.png" : item.RoomStatus.Description == "Sucio" ? "media/diro.png" : item.RoomStatus.Description == "Mantenimiento" ? "media/mnto.png" : "media/clro.png" )" Height="50" />
                            <MudText Typo="Typo.subtitle1" Align="Align.Center">@item.Description</MudText>
                        </MudStack>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
</MudPaper>

<Dialog @ref="DialogBusy" Title="@ModalTitle" MaxWidth="MaxWidth.Medium" FullWidth="true">
    <MudStack Row="true">
        <MudText><b>Código: </b></MudText>
        <MudText>@RoomCheckInDetail.Code</MudText>
    </MudStack>
    <MudStack Row="true">
        <MudText><b>Habitación: </b></MudText>
        <MudText>@RoomCheckInDetail.Room.Description (@RoomCheckInDetail.Room.RoomType.Description)</MudText>
    </MudStack>
    <MudStack Row="true">
        <MudText><b>Huésped: </b></MudText>
        <MudText>Sr. @RoomCheckInDetail.Guest.FullName</MudText>
    </MudStack>
    <MudStack Row="true">
        <MudText><b>Acompañantes: </b></MudText>
        @if (RoomCheckInDetail.Companions == null || !RoomCheckInDetail.Companions.Any())
        {
            <MudText>Ninguno</MudText>
        }
        else
        {
            <MudStack>
                @foreach (var comp in RoomCheckInDetail.Companions)
                {
                    <MudText>Sr. @comp.Guest.FullName</MudText>
                }
            </MudStack>
        }
    </MudStack>
    <MudStack Row="true">
        <MudText><b>Entrada: </b></MudText>
        <MudText>@RoomCheckInDetail.EntryTime.ToLocalTime().ToString("dd/MM/yyyy hh:mm tt")</MudText>
    </MudStack>
    <MudStack Row="true">
        <MudText><b>Salida: </b></MudText>
        <MudText>@RoomCheckInDetail.ExitTime.ToLocalTime().ToString("dd/MM/yyyy hh:mm tt")</MudText>
    </MudStack>
    <MudStack Row="true" Class="mt-2 justify-space-between">
        <MudTable Items="@Enumerable.Range(0, RoomCheckInDetail.Nights)" Hover="true" Dense="true" Breakpoint="Breakpoint.Sm" Loading="false" LoadingProgressColor="Color.Info">
            <HeaderContent>
                <MudTh>Acción</MudTh>
                <MudTh>Fecha</MudTh>
                <MudTh>Descripción</MudTh>
                <MudTh>Habitación</MudTh>
                <MudTh>Precio</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd></MudTd>
                <MudTd>@RoomCheckInDetail.EntryTime.ToLocalTime().AddDays(context).ToString("dd/MM/yyyy") - @RoomCheckInDetail.EntryTime.ToLocalTime().AddDays(context + 1).ToString("dd/MM/yyyy")</MudTd>
                <MudTd>@RoomCheckInDetail.Room.RoomType.Description</MudTd>
                <MudTd>@RoomCheckInDetail.Room.Description</MudTd>
                <MudTd>S/ @RoomCheckInDetail.Fee.Amount</MudTd>
            </RowTemplate>
        </MudTable>
        <MudTable Items="@Enumerable.Range(0, 1)" Hover="true" Dense="true" Breakpoint="Breakpoint.Sm" Loading="false" LoadingProgressColor="Color.Info">
            <HeaderContent>
                <MudTh>Moneda</MudTh>
                <MudTh>Total</MudTh>
                <MudTh>Saldo</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@RoomCheckInDetail.Fee.FeeType.Currency.Code</MudTd>
                <MudTd Class="mud-success-text">@((RoomCheckInDetail.Fee.Amount * RoomCheckInDetail.Nights).ToString("#.##"))</MudTd>
                <MudTd Class="mud-error-text">@(RoomCheckInDetail.StatusId == Constants.Status.ENABLED_ID ? "0.00" : (RoomCheckInDetail.Amount == null ? RoomCheckInDetail.Fee.Amount * RoomCheckInDetail.Nights : (RoomCheckInDetail.Fee.Amount * RoomCheckInDetail.Nights) - RoomCheckInDetail.Amount.Value).ToString("#.##"))</MudTd>
            </RowTemplate>
        </MudTable>
    </MudStack>
    @if (!FormExtensionIsVisible && !FormPaymentIsVisible)
    {
        <MudStack Row="true" Class="mt-2">
            @if(RoomCheckInDetail.Room.RoomStatus.Description == "Con Deuda")
            {
                <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="CancelCheckInAsync" StartIcon="@Icons.Material.Filled.Cancel">Cancelar CheckIn</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="ShowFormPayment" StartIcon="@Icons.Material.Filled.Payment">Pagar Deuda</MudButton>
            }
            <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="ShowFormExtension" StartIcon="@Icons.Material.Filled.Extension">Extender Estadía</MudButton>
            @if (RoomCheckInDetail.Room.RoomStatus.Description == "Ocupado")
            {
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CheckOutAsync" StartIcon="@Icons.Material.Filled.DoorBack">CheckOut</MudButton>
            }
        </MudStack>
    }
    @if (FormExtensionIsVisible)
    {
        <MudForm Model="RoomCheckInExtension" Class="mt-2">
            <MudStack Row="true">
                <MudDatePicker Date="RoomCheckInExtension.ExitTime" Label="Salida" Editable="true" Placeholder="Escoge una fecha" DateChanged="OnDateChanged" Variant="Variant.Outlined" />
                <MudSelect T="int" @bind-Value="RoomCheckInExtension.Hour" Label="Hora" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                    @foreach (var hour in Enumerable.Range(1, 12))
                    {
                        <MudSelectItem Value="@hour">@hour</MudSelectItem>
                    }
                </MudSelect>
                <MudSelect T="int" @bind-Value="RoomCheckInExtension.Meridian" Label="Meridiano" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                    <MudSelectItem Value="0">AM</MudSelectItem>
                    <MudSelectItem Value="1">PM</MudSelectItem>
                </MudSelect>
            </MudStack>
        </MudForm>
        <MudStack Row="true" Class="mt-2">
            <MudButton Variant="Variant.Filled" OnClick="HideFormExtension" StartIcon="@Icons.Material.Filled.Close">Cancelar</MudButton>
            <ButtonLoader Text="Guardar" LoadingText="Guardando" Icon="@Icons.Material.Filled.Save" OnClickCallback="SaveCheckInExtensionAsync" />
        </MudStack>
    }
    @if (FormPaymentIsVisible)
    {
        <MudForm Model="RoomCheckInPayment" Class="mt-2">
            <MudStack Row="true">
                <MudSelect T="Guid" Label="Método de Pago" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" ValueChanged="(Guid value) => OnPaymentMethodChanged(value)">
                    @foreach(var item in PaymentMethods)
                    {
                        <MudSelectItem Value="@item.Id">@item.Description</MudSelectItem>
                    }
                </MudSelect>
                @if (SelectedPaymentMethod.RequiresAmount)
                {
                    <MudNumericField T="double?" @bind-Value="RoomCheckInPayment.Amount" Label="Monto" Variant="Variant.Outlined" />
                }
                @if (SelectedPaymentMethod.RequiresVoucherNumber)
                {
                    <MudTextField @bind-Value="RoomCheckInPayment.VoucherNumber" Label="# Voucher/Operación" Variant="Variant.Outlined" />
                }
            </MudStack>
        </MudForm>
        <MudStack Row="true" Class="mt-2">
            <MudButton Variant="Variant.Filled" OnClick="HideFormPayment" StartIcon="@Icons.Material.Filled.Close">Cancelar</MudButton>
            <ButtonLoader Text="Guardar" LoadingText="Guardando" Icon="@Icons.Material.Filled.Save" OnClickCallback="SaveCheckInPaymentAsync" />
        </MudStack>
    }
</Dialog>

<Dialog @ref="DialogDirty" Title="@ModalTitle" MaxWidth="MaxWidth.Small" FullWidth="true">
    <MudText Typo="Typo.h6">¿Quién se encuentra limpiando?</MudText>
    <MudTextField T="string" Label="Búsqueda de Empleado (DNI o Apellidos)" @onchange="OnSearchChanged" />
    <MudSelect T="Guid" @bind-Value="RoomCleaning.EmployeeId" Label="Empleado" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
        @foreach (var item in Employees)
        {
            <MudSelectItem Value="@item.Id">@item.FullName</MudSelectItem>
        }
    </MudSelect>
</Dialog>

<Dialog @ref="DialogCleaning" Title="@ModalTitle" MaxWidth="MaxWidth.Small" FullWidth="true">
    <MudStack Row="true">
        <MudText><b>Encargado: </b></MudText>
        <MudText>Sr. @RoomCleaningDetail.Employee.FullName</MudText>
    </MudStack>
    <MudStack Row="true">
        <MudText><b>Inicio: </b></MudText>
        <MudText>@RoomCleaningDetail.StartedAt?.ToLocalTime().ToString("dd/MM/yyyy hh:mm tt")</MudText>
    </MudStack>
</Dialog>

<Dialog @ref="DialogManagement" Title="@ModalTitle" MaxWidth="MaxWidth.Small" FullWidth="true">
    <MudStack Row="true">
        <MudText><b>Técnico: </b></MudText>
        <MudText>Sr. @RoomMaintenanceDetail.Employee.FullName</MudText>
    </MudStack>
    <MudStack Row="true">
        <MudText><b>Observación: </b></MudText>
        <MudText>@RoomMaintenanceDetail.Description</MudText>
    </MudStack>
    <MudStack Row="true">
        <MudText><b>Inicio: </b></MudText>
        <MudText>@RoomMaintenanceDetail.StartedAt.ToLocalTime().ToString("dd/MM/yyyy hh:mm tt")</MudText>
    </MudStack>
</Dialog>

@code {
    private Dialog DialogBusy;
    private Dialog DialogDirty;
    private Dialog DialogCleaning;
    private Dialog DialogManagement;
    private Dialog DialogExtension;

    private string ModalTitle;
    private Room[]? ItemsList;
    private bool FormExtensionIsVisible = false;
    private bool FormPaymentIsVisible = false;

    private RoomCheckInExtensionResource RoomCheckInExtension;
    private RoomCheckInPaymentResource RoomCheckInPayment;
    private RoomCleaning RoomCleaning;
    private RoomCheckIn RoomCheckInDetail;
    private RoomCleaning RoomCleaningDetail;
    private RoomMaintenance RoomMaintenanceDetail;
    private PaymentMethod SelectedPaymentMethod;
    private ICollection<Employee> Employees;
    private ICollection<PaymentMethod> PaymentMethods;
    private SelectResource<Guid>[]? RoomTypes;
    private SelectResource<Guid>[]? RoomStatus;
    private Guid? filterType;
    private Guid? filterStatus;

    private Guid? FilterStatus
    {
        get { return filterStatus; }
        set
        {
            filterStatus = value;
            FilterData();
        }
    }
    private Guid? FilterType
    {
        get { return filterType; }
        set
        {
            filterType = value;
            FilterData();
        }
    }

    private int AvailableCount = 0;
    private int BusyCount = 0;
    private int InDebtCount = 0;
    private int DirtyCount = 0;
    private int CleaningCount = 0;
    private int MaintenanceCount = 0;

    public enum ModalType
    {
        New, Edit
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await Load();
            await LoadSelects();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    public async Task Load()
    {
        ItemsList = await Http.GetFromJsonAsync<Room[]>(ApiRouteConfig.Management.Rooms.ROOM_ROUTE);
        AvailableCount = ItemsList.Count(x => x.RoomStatus.Description == "Disponible");
        BusyCount = ItemsList.Count(x => x.RoomStatus.Description == "Ocupado");
        InDebtCount = ItemsList.Count(x => x.RoomStatus.Description == "Con Deuda");
        DirtyCount = ItemsList.Count(x => x.RoomStatus.Description == "Sucio");
        CleaningCount = ItemsList.Count(x => x.RoomStatus.Description == "En Limpieza");
        MaintenanceCount = ItemsList.Count(x => x.RoomStatus.Description == "Mantenimiento");
    }

    public async Task LoadSelects()
    {
        Employees = await Http.GetFromJsonAsync<Employee[]>(ApiRouteConfig.Management.Business.EMPLOYEE_ROUTE);
        RoomTypes = await Http.GetFromJsonAsync<SelectResource<Guid>[]>(ApiRouteConfig.Select.SELECT_ROUTE + "/tipos-de-habitacion");
        RoomStatus = await Http.GetFromJsonAsync<SelectResource<Guid>[]>(ApiRouteConfig.Select.SELECT_ROUTE + "/estados-de-habitacion");
        PaymentMethods = await Http.GetFromJsonAsync<PaymentMethod[]>(ApiRouteConfig.Payment.PAYMENT_METHOD_ROUTE + "?inDebt=false");
        if (PaymentMethods.Any())
        {
            SelectedPaymentMethod = PaymentMethods.FirstOrDefault();
        }
    }

    public async Task FilterData()
    {
        ItemsList = await Http.GetFromJsonAsync<Room[]>($"{ApiRouteConfig.Management.Rooms.ROOM_ROUTE}?tipo={(FilterType.HasValue ? FilterType.ToString() : "")}&estado={(FilterStatus.HasValue ? FilterStatus.ToString() : "")}");
        AvailableCount = ItemsList.Count(x => x.RoomStatus.Description == "Disponible");
        BusyCount = ItemsList.Count(x => x.RoomStatus.Description == "Ocupado");
        DirtyCount = ItemsList.Count(x => x.RoomStatus.Description == "Sucio");
        CleaningCount = ItemsList.Count(x => x.RoomStatus.Description == "En Limpieza");
        MaintenanceCount = ItemsList.Count(x => x.RoomStatus.Description == "Mantenimiento");
        StateHasChanged();
    }

    private async Task OnSearchChanged(ChangeEventArgs e)
    {
        if (!string.IsNullOrEmpty(e.Value.ToString()))
        {
            Employees = await Http.GetFromJsonAsync<Employee[]>(ApiRouteConfig.Management.Business.EMPLOYEE_ROUTE + "?filtro=" + e.Value.ToString());
        }
    }

    public async Task ShowModalAsync(Room room = null)
    {
        @if (room.RoomStatus.Description == "Disponible")
        {
            Navigation.NavigateTo($"/rack/checkin/{room.Id}");
        }
        else if (room.RoomStatus.Description == "Ocupado" || room.RoomStatus.Description == "Con Deuda")
        {
            ModalTitle = $"Habitación #{room.Description}";
            RoomCheckInDetail = await Http.GetFromJsonAsync<RoomCheckIn>($"{ApiRouteConfig.Rack.DETAIL_ROUTE}/{room.Id}");

            if (RoomCheckInDetail == null || RoomCheckInDetail.RoomId != room.Id)
            {
            }
            StateHasChanged();
            DialogBusy.Open();
        }
        else if (room.RoomStatus.Description == "Sucio")
        {
            ModalTitle = $"Habitación #{room.Description}";
            RoomCleaning = new RoomCleaning
                {
                    RoomId = room.Id,
                };
            DialogDirty.Open();
        }
        else if (room.RoomStatus.Description == "En Limpieza")
        {
            ModalTitle = $"Habitación #{room.Description}";
            if (RoomCleaningDetail == null || RoomCleaningDetail.RoomId != room.Id)
            {
                RoomCleaningDetail = await Http.GetFromJsonAsync<RoomCleaning>($"{ApiRouteConfig.Rack.DETAIL_ROUTE}/{room.Id}");
            }
            DialogCleaning.Open();
        }
        else if (room.RoomStatus.Description == "Mantenimiento")
        {
            ModalTitle = $"Habitación #{room.Description}";
            if (RoomMaintenanceDetail == null || RoomMaintenanceDetail.RoomId != room.Id)
            {
                RoomMaintenanceDetail = await Http.GetFromJsonAsync<RoomMaintenance>($"{ApiRouteConfig.Rack.DETAIL_ROUTE}/{room.Id}");
            }
            DialogManagement.Open();
        }
    }

    public async Task SaveCleaningAsync()
    {
        try
        {
            await Http.PostAsJsonAsync(ApiRouteConfig.Rack.CLEANING_ROUTE, RoomCleaning);
            await Load();
            DialogDirty.Close();
        }
        catch (Exception ex)
        {

        }
    }

    public async Task SaveCheckInExtensionAsync()
    {
        try
        {
            await Http.PostAsJsonAsync(ApiRouteConfig.Rack.EXTENSION_ROUTE, RoomCheckInExtension);
            HideFormExtension();
            RoomCheckInDetail = await Http.GetFromJsonAsync<RoomCheckIn>($"{ApiRouteConfig.Rack.DETAIL_ROUTE}/{RoomCheckInDetail.RoomId}");
            StateHasChanged();
            await Load();
        }
        catch (Exception ex)
        {

        }
    }

    public async Task SaveCheckInPaymentAsync()
    {
        try
        {
            await Http.PostAsJsonAsync(ApiRouteConfig.Rack.PAYMENT_ROUTE, RoomCheckInPayment);
            HideFormPayment();
            RoomCheckInDetail = await Http.GetFromJsonAsync<RoomCheckIn>($"{ApiRouteConfig.Rack.DETAIL_ROUTE}/{RoomCheckInDetail.RoomId}");
            StateHasChanged();
            await Load();
        }
        catch (Exception ex)
        {
        }
    }

    public void ShowCleaningError()
    {
    }

    public async Task CancelCheckInAsync()
    {
        if (RoomCheckInDetail != null)
        {
            try
            {
                await Http.GetAsync(ApiRouteConfig.Rack.CANCEL_ROUTE + "/" + RoomCheckInDetail.RoomId);
                DialogBusy.Close();
                await Load();
            }
            catch (Exception ex)
            {
            }
        }
    }

    private async Task OnDateChanged(DateTime? dateTime)
    {
        if (dateTime.HasValue)
        {
            RoomCheckInExtension.ExitTime = dateTime.Value;
            StateHasChanged();
        }
    }

    private void OnPaymentMethodChanged(Guid value)
    {
        RoomCheckInPayment.PaymentMethodId = value;
        SelectedPaymentMethod = PaymentMethods.First(x => x.Id == value);
    }

    private void ShowFormExtension()
    {
        if (RoomCheckInDetail != null)
        {
            var nextDay = RoomCheckInDetail.ExitTime.ToLocalTime().AddDays(1);
            RoomCheckInExtension = new()
            {
                RoomCheckInId = RoomCheckInDetail.Id,
                ExitTime = nextDay.Date,
                Hour = 12,
                Meridian = 1
            };
        }

        FormExtensionIsVisible = true;
        StateHasChanged();
    }

    private void HideFormExtension()
    {
        FormExtensionIsVisible = false;
        StateHasChanged();
    }

    private void ShowFormPayment()
    {
        if (RoomCheckInDetail != null)
        {
            RoomCheckInPayment = new()
                {
                    RoomCheckInId = RoomCheckInDetail.Id,
                    PaymentMethodId = PaymentMethods.Select(x => x.Id).FirstOrDefault(),
                };
        }

        FormPaymentIsVisible = true;
        StateHasChanged();
    }

    private void HideFormPayment()
    {
        FormPaymentIsVisible = false;
        StateHasChanged();
    }

    public async Task CheckOutAsync()
    {
        if (RoomCheckInDetail != null)
        {
            try
            {
                await Http.GetAsync(ApiRouteConfig.Rack.CHECKOUT_ROUTE + "/" + RoomCheckInDetail.RoomId);
                DialogBusy.Close();
                await Load();
            }
            catch (Exception ex)
            {
            }
        }
    }
}
