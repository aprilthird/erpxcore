@page "/rack/checkin/{roomId:guid}"
@using ERP.XCore.Entities.Models
@using ERP.XCore.Hotel.Shared.Helpers
@using ERP.XCore.Hotel.Shared.Resources.Base
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject HttpClient Http
@inject NavigationManager Navigation

<div class="row px-5">
	<div class="d-flex justify-content-between">
		<h3>Checkin de Habitación</h3>
	</div>
	<Microsoft.AspNetCore.Components.Forms.EditForm Model="RoomBooking" OnValidSubmit="OnValidSubmitAsync">
        @*<FluentValidationValidator />*@
        <div class="alert alert-danger alert-dismissible fade @AlertDisplayClass" role="alert" style="display:@AlertDisplayCss">
            <h5 class="alert-heading">Error</h5>
            <p>@ErrorMessage</p>
            <button class="close" type="button" @onclick="CloseAlertAsync"><span>×</span></button>
        </div>
        <div class="row pb-2">
            <div class="col-sm-12">
                <div class="form-group">
                    <label for="room">Habitación</label>
                    <input id="room" value="@Room.Description" class="form-control" readonly />
                </div>
            </div>
        </div>
        <div class="row pb-2">
            <div class="col-sm-12">
                <div class="form-group">
                    <label for="roomtype">Tipo Habitación</label>
                    <input id="roomtype" value="@Room.RoomType.Description" class="form-control" readonly />
                </div>
            </div>
        </div>
        <div class="row pb-2">
            <div class="col-sm-12">
                <div class="form-group">
                    <label for="entrytime">Entrada</label>
                    <input id="entrytime" value="@RoomBooking.EntryTime.ToString("dd/MM/yyyy hh:mm tt")" class="form-control" readonly />
                </div>
            </div>
        </div>
        <div class="row pb-2">
            <div class="col-sm-12">
                <div class="form-group">
                    <label for="related">Reserva Vinculada</label>
                    <InputText @bind-Value="RoomBooking.RelatedBookingCode" id="related" class="form-control" placeholder="Reserva Vinculada" />
                    <ValidationMessage For="() => RoomBooking.RelatedBookingCode" />
                </div>
            </div>
        </div>
        <div class="row pb-2">
            <div class="col-sm-6">
                <div class="form-group">
                    <MudDatePicker Date="RoomBooking.ExitTime" Label="Salida" Editable="true" Placeholder="Escoge una fecha" DateChanged="OnDateChanged" />
                    <ValidationMessage For="() => RoomBooking.ExitTime" />
                </div>
            </div>
            <div class="col-sm-3">
                <div class="form-group">
                    <label>&emsp;</label>
                    <InputSelect @bind-Value="RoomBooking.Hour" id="hour" class="form-control" placeholder="Hora">
                        @for(var i=1; i<=12; ++i)
                        {
                            <option value="@i">@i.ToString("00")</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => RoomBooking.Hour" />
                </div>
            </div>
            <div class="col-sm-3">
                <div class="form-group">
                    <label>&emsp;</label>
                    <InputSelect @bind-Value="RoomBooking.Meridian" id="meridian" class="form-control" placeholder="Meridiano">
                        <option value="0">AM</option>
                        <option value="1">PM</option>
                    </InputSelect>
                    <ValidationMessage For="() => RoomBooking.Meridian" />
                </div>
            </div>
        </div>
        <div class="row pb-2">
            <div class="col-sm-12">
                <div class="form-group">
                    <label for="nights">Num. Noches</label>
                    <InputNumber @bind-Value="RoomBooking.Nights" id="nights" class="form-control" placeholder="Num. Noches" />
                    <ValidationMessage For="() => RoomBooking.Nights" />
                </div>
            </div>
        </div>
        <div class="row pb-2">
            <div class="col-sm-12">
                <div class="form-group">
                    <label for="guest">Huésped</label>
                    <input class="form-control pb-2" placeholder="Búsqueda de Huésped" @onchange="OnSearchChanged" />
                    <InputSelect @bind-Value="RoomBooking.GuestId" id="guest" class="form-control" placeholder="Huésped">
                        @foreach(var item in Guests)
                        {
                            <option value="@item.Id">@item.LastName, @item.FirstName</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => RoomBooking.GuestId" />
                </div>
            </div>
        </div>
        <div class="row pb-2">
            <div class="col-sm-12">
                <div class="form-group">
                    <label for="paymentmethod">Método de Pago</label>
                    <select id="paymentmethod" class="form-control" placeholder="Método de Pago" @onchange="OnPaymentMethodChanged">
                        @foreach(var item in PaymentMethods)
                        {
                            <option value="@item.Id">@item.Description</option>
                        }
                    </select>
                    <ValidationMessage For="() => RoomBooking.PaymentMethodId" />
                </div>
            </div>
        </div>
        @if(SelectedPaymentMethod.RequiresAmount)
        {
            <div class="row pb-2">
                <div class="col-sm-12">
                    <div class="form-group">
                        <label for="amount">Monto</label>
                        <InputNumber @bind-Value="RoomBooking.Amount" id="amount" class="form-control" placeholder="Monto" />
                        <ValidationMessage For="() => RoomBooking.Amount" />
                    </div>
                </div>
            </div>
        }
        @if(SelectedPaymentMethod.RequiresVoucherNumber)
        {
            <div class="row pb-2">
                <div class="col-sm-12">
                    <div class="form-group">
                        <label for="amount">Voucher</label>
                        <InputText @bind-Value="RoomBooking.VoucherNumber" id="amount" class="form-control" placeholder="# Voucher/Operación" />
                        <ValidationMessage For="() => RoomBooking.VoucherNumber" />
                    </div>
                </div>
            </div>
        }
        <Button @ref="SubmitButton" Text="Guardar" Icon="c-icon cil-save" Type="Shared.Button.ButtonType.Submit" />
    </Microsoft.AspNetCore.Components.Forms.EditForm>
</div>

@code {
    [Parameter]
    public Guid RoomId { get; set; }

    public Room Room { get; set; }
    public RoomBooking RoomBooking { get; set; }
    public PaymentMethod SelectedPaymentMethod { get; set; }
    public ICollection<PaymentMethod> PaymentMethods { get; set; }
    public ICollection<Guest> Guests { get; set; }
    public Shared.Button SubmitButton { get; set; }

    private string ErrorMessage = null;
    private string AlertDisplayClass = "hide";
    private string AlertDisplayCss = "none;";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var current = DateTime.Now;
            if (current.Minute > 0 && current.Minute < 30)
            {
                current = current.AddMinutes(-current.Minute).AddMinutes(30);
            }
            else if (current.Minute >= 30)
            {
                current = current.AddMinutes(-current.Minute).AddHours(1);
            }
            RoomBooking = new RoomBooking() { EntryTime = current, RoomId = RoomId, ExitTime = current.Date.AddDays(1) };
            await Load();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    public async Task Load()
    {
        Room = await Http.GetFromJsonAsync<Room>(ApiRouteConfig.Management.Rooms.ROOM_ROUTE + "/" + RoomId);
        Guests = await Http.GetFromJsonAsync<Guest[]>(ApiRouteConfig.Management.Guests.GUEST_ROUTE);
        PaymentMethods = await Http.GetFromJsonAsync<PaymentMethod[]>(ApiRouteConfig.Payment.PAYMENT_METHOD_ROUTE);
        if(PaymentMethods.Any())
        {
            SelectedPaymentMethod = PaymentMethods.FirstOrDefault();
            RoomBooking.PaymentMethodId = PaymentMethods.Select(x => x.Id).FirstOrDefault();
        }
    }

    private async Task OnDateChanged(DateTime? dateTime)
    {
        if (dateTime.HasValue) 
        {
            RoomBooking.ExitTime = dateTime.Value;
            RoomBooking.Nights = (RoomBooking.ExitTime - RoomBooking.EntryTime).Days;
        }
    }

    private async Task OnSearchChanged(ChangeEventArgs e)
    {
        if(!string.IsNullOrEmpty(e.Value.ToString()))
        {
            Guests = await Http.GetFromJsonAsync<Guest[]>(ApiRouteConfig.Management.Guests.GUEST_ROUTE + "?search=" + e.Value.ToString());
        }
    }

    private void OnPaymentMethodChanged(ChangeEventArgs e)
    {
        RoomBooking.PaymentMethodId = Guid.Parse(e.Value.ToString());
        SelectedPaymentMethod = PaymentMethods.First(x => x.Id == Guid.Parse(e.Value.ToString()));
    }

    private async Task OnValidSubmitAsync()
    {
        try
        {
            await CloseAlertAsync();
            await Http.PostAsJsonAsync(ApiRouteConfig.Rack.CHECKIN_ROUTE, RoomBooking);
            Navigation.NavigateTo("/rack");
        }
        catch(Exception ex)
        {
            await ShowAlertAsync(ex.Message);
        }
    }

    private async Task OnInvalidSubmitAsync()
    {
        await ShowAlertAsync("Valide los campos ingresados");
    }

    private async Task ShowAlertAsync(string message)
    {
        ErrorMessage = message;
        AlertDisplayCss = "block;";
        await Task.Delay(500);
        AlertDisplayClass = "show";
    }

    private async Task CloseAlertAsync()
    {
        ErrorMessage = null;
        AlertDisplayClass = "hide";
        await Task.Delay(1000);
        AlertDisplayCss = "none;";
    }
}
