@page "/rack/checkin/{roomId:guid}"
@using ERP.XCore.Entities.Models
@using ERP.XCore.Hotel.Shared.Helpers
@using ERP.XCore.Hotel.Shared.Resources.Base
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject HttpClient Http
@inject NavigationManager Navigation

<PageTitle>CheckIn</PageTitle>

<MudPaper Elevation="1" Class="pa-4">
    <MudText Typo="Typo.h3">CheckIn de Habitación</MudText>

    <MudDivider />

    <MudStack Row="true">
        <MudStack Row="true">
            <MudText><b>Habitación: </b></MudText>
            <MudText>@Room.Description</MudText>
        </MudStack>
        <MudStack Row="true">
            <MudText><b>Tipo: </b></MudText>
            <MudText>@Room.RoomType.Description</MudText>
        </MudStack>
        <MudStack Row="true">
            <MudText><b>Entrada: </b></MudText>
            <MudText>@RoomCheckIn.EntryTime.ToString("dd/MM/yyyy hh:mm tt")</MudText>
        </MudStack>
    </MudStack>

    <MudForm Model="RoomCheckIn">
        <MudStack Row="true">
            <MudStack>
                <MudNumericField Value="RoomCheckIn.Nights" Label="Num. Noches" Variant="Variant.Text" Min="1" Placeholder="Num. Noches" ValueChanged="(int value) => OnNightsChanged(value)" />
                <MudStack Row="true">
                    <MudDatePicker Date="RoomCheckIn.ExitTime" Label="Salida" Editable="true" Placeholder="Escoge una fecha" DateChanged="OnDateChanged" />
                    <MudSelect T="int" @bind-Value="RoomCheckIn.Hour" Label="Hora" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                        @for (var i = 1; i <= 12; ++i)
                        {
                            <MudSelectItem Value="@i">@i.ToString("00")</MudSelectItem>
                        }
                    </MudSelect>
                    <MudSelect T="int" @bind-Value="RoomCheckIn.Meridian" Label="Meridiano" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                        <MudSelectItem Value="0">AM</MudSelectItem>
                        <MudSelectItem Value="1">PM</MudSelectItem>
                    </MudSelect>
                </MudStack>
                <MudTextField T="string" Label="Búsqueda de Huésped" @onchange="OnSearchChanged" />
                <Button Icon="fas fa-plus" OnClickCallback="OnNewCustomerAsync" />
                <MudSelect @bind-Value="RoomCheckIn.GuestId" Label="Huésped">
                    @foreach (var item in Guests)
                    {
                        <MudSelectItem Value="@item.Id">@item.FullName</MudSelectItem>
                    }
                </MudSelect>
                <MudTextField T="string" Label="Búsqueda de Invitados" @onchange="OnSearch2Changed" />
                <Button Icon="fas fa-plus" OnClickCallback="OnNewCustomerAsync" />
                <MudSelect MultiSelection="true" @bind-Value="RoomCheckIn.CompanionIds" Label="Invitados">
                    @foreach (var item in Companions)
                    {
                        <MudSelectItem Value="@item.Id">@item.FullName</MudSelectItem>
                    }
                </MudSelect>
                <Button Icon="fas fa-arrow-right" OnClickCallback="OnSelectCompanionAsync" />
                <Button Icon="fas fa-times" Theme="Shared.Button.ButtonTheme.Danger" OnClickCallback="OnClearCompanionsAsync" />
                <MudSelect MultiSelection="true" @bind-Value="RoomCheckIn.SelectedCompanionIds" Label="Invitados">
                    @foreach (var item in SelectedCompanions)
                    {
                        <MudSelectItem Value="@item.Id">@item.FullName</MudSelectItem>
                    }
                </MudSelect>
            </MudStack>
            <MudStack>
                <MudSelect @bind-Value="RoomCheckIn.FeeId" Label="Tarifa" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" @onchange="OnFeeChanged">
                    @foreach (var item in Fees)
                    {
                        <MudSelectItem Value="@item.Id">@item.FeeType.Description (@item.RoomType.Description) - @item.FeeType.Currency.Sign @item.Amount</MudSelectItem>
                    }
                </MudSelect>
                <MudSelect @bind-Value="RoomCheckIn.PaymentMethodId" Label="Método de Pago" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" @onchange="OnPaymentMethodChanged">
                    @foreach (var item in PaymentMethods)
                    {
                        <MudSelectItem Value="@item.Id">@item.Description</MudSelectItem>
                    }
                </MudSelect>
                @if (SelectedPaymentMethod.RequiresAmount)
                {
                    <MudNumericField T="double?" @bind-Value="RoomCheckIn.Amount" Label="Monto" Variant="Variant.Outlined" />
                }
                @if (SelectedPaymentMethod.RequiresVoucherNumber)
                {
                    <MudTextField @bind-Value="RoomCheckIn.VoucherNumber" Label="# Voucher/Operación" Variant="Variant.Outlined" />
                }
            </MudStack>
        </MudStack>
    </MudForm>
    
    <MudStack Row="true">
        <MudButton StartIcon="@Icons.Material.Filled.ArrowBack" OnClick="BackAsync">Regresar</MudButton>
        <ButtonLoader Text="Guardar" LoadingText="Guardando" Icon="@Icons.Material.Filled.Save" OnClickCallback="SaveAsync" />
    </MudStack>
</MudPaper>
@*
<div class="row px-5">
	<div class="d-flex justify-content-between">
		<h3>CheckIn de Habitación</h3>
	</div>
	<Microsoft.AspNetCore.Components.Forms.EditForm Model="RoomCheckIn" OnValidSubmit="OnValidSubmitAsync">
        <div class="card border border-2">
            <div class="card-body">
                <div class="row d-flex justify-content-between">
                    <div class="col-md-3">
                        <label class="fw-bold">Habitación: </label>
                        <span>@Room.Description</span>
                    </div>
                    <div class="col-md-3">
                        <label class="fw-bold">Tipo: </label>
                        <span>@Room.RoomType.Description</span>
                    </div>
                    <div class="col-md-3">
                        <label class="fw-bold">Entrada: </label>
                        <span>@RoomCheckIn.EntryTime.ToString("dd/MM/yyyy hh:mm tt")</span>
                    </div>
                </div>
            </div>
        </div>
        <FluentValidationValidator />
        <div class="alert alert-danger alert-dismissible fade @AlertDisplayClass" role="alert" style="display:@AlertDisplayCss">
            <h5 class="alert-heading">Error</h5>
            <p>@ErrorMessage</p>
            <button class="close" type="button" @onclick="CloseAlertAsync"><span>×</span></button>
        </div>
        <div class="hstack justify-content-between align-items-start mt-3">
            <div class="col-md-5">
                <div class="row pb-2">
                    <div class="col-sm-12">
                        <div class="form-group">
                            <label for="related">Reserva Vinculada</label>
                            <InputText @bind-Value="RoomCheckIn.RelatedBookingCode" id="related" class="form-control" placeholder="Reserva Vinculada" />
                            <ValidationMessage For="() => RoomCheckIn.RelatedBookingCode" />
                        </div>
                    </div>
                </div>
                <div class="row pb-2">
                    <div class="col-sm-12">
                        <div class="form-group">
                            <label for="nights">Num. Noches</label>
                            <MudNumericField Value="RoomCheckIn.Nights" Label="Num. Noches" Variant="Variant.Text" Min="1" Placeholder="Num. Noches" ValueChanged="(int value) => OnNightsChanged(value)" />
                            <ValidationMessage For="() => RoomCheckIn.Nights" />
                        </div>
                    </div>
                </div>
                <div class="row pb-2">
                    <div class="col-sm-6">
                        <div class="form-group">
                            <MudDatePicker Date="RoomCheckIn.ExitTime" Label="Salida" Editable="true" Placeholder="Escoge una fecha" DateChanged="OnDateChanged" />
                            <ValidationMessage For="() => RoomCheckIn.ExitTime" />
                        </div>
                    </div>
                    <div class="col-sm-3">
                        <div class="form-group">
                            <label>&emsp;</label>
                            <InputSelect @bind-Value="RoomCheckIn.Hour" id="hour" class="form-control" placeholder="Hora">
                                @for (var i = 1; i <= 12; ++i)
                                {
                                    <option value="@i">@i.ToString("00")</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="() => RoomCheckIn.Hour" />
                        </div>
                    </div>
                    <div class="col-sm-3">
                        <div class="form-group">
                            <label>&emsp;</label>
                            <InputSelect @bind-Value="RoomCheckIn.Meridian" id="meridian" class="form-control" placeholder="Meridiano">
                                <option value="0">AM</option>
                                <option value="1">PM</option>
                            </InputSelect>
                            <ValidationMessage For="() => RoomCheckIn.Meridian" />
                        </div>
                    </div>
                </div>
                <div class="row pb-2">
                    <div class="col-sm-12">
                        <div class="form-group">
                            <label for="guest">Huésped</label>
                            <div class="input-group mt-3">
                                <input class="form-control pb-2" placeholder="Búsqueda de Huésped" @onchange="OnSearchChanged" />
                                <Button Icon="fas fa-plus" OnClickCallback="OnNewCustomerAsync" />
                            </div>
                            <InputSelect @bind-Value="RoomCheckIn.GuestId" id="guest" class="form-control mt-3" placeholder="Huésped">
                                @foreach (var item in Guests)
                                {
                                    <option value="@item.Id">@item.FullName</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="() => RoomCheckIn.GuestId" />
                        </div>
                    </div>
                </div>
                <div class="row pb-2">
                    <div class="col-sm-12">
                        <div class="form-group">
                            <label for="guest">Invitados</label>
                            <div class="input-group mt-3">
                                <input class="form-control pb-2" placeholder="Búsqueda de Invitados" @onchange="OnSearch2Changed" />
                                <Button Icon="fas fa-plus" OnClickCallback="OnNewCustomerAsync" />
                            </div>
                            <div class="row mt-3">
                                <div class="col-md-5">
                                    <InputSelect @bind-Value="RoomCheckIn.CompanionIds" class="form-control col-md-4" placeholder="Invitados">
                                        @foreach (var item in Companions)
                                        {
                                            <option value="@item.Id">@item.FullName</option>
                                        }
                                    </InputSelect>
                                </div>
                                <div class="col-md-2 d-flex flex-column">
                                    <Button Icon="fas fa-arrow-right" OnClickCallback="OnSelectCompanionAsync" />
                                    <Button Icon="fas fa-times" Theme="Shared.Button.ButtonTheme.Danger" OnClickCallback="OnClearCompanionsAsync" />
                                </div>
                                <div class="col-md-5">
                                    <InputSelect @bind-Value="RoomCheckIn.SelectedCompanionIds" class="form-control col-md-4" placeholder="Invitados">
                                        @foreach (var item in SelectedCompanions)
                                        {
                                            <option value="@item.Id">@item.FullName</option>
                                        }
                                    </InputSelect>
                                </div>
                            </div>
                            <ValidationMessage For="() => RoomCheckIn.GuestId" />
                        </div>
                    </div>
                </div>
            </div>
            <div class="vr"></div>
            <div class="col-md-5">
                <div class="row pb-2">
                    <div class="col-sm-12">
                        <div class="form-group">
                            <label for="fee">Tarifa</label>
                            <select id="fee" class="form-control" placeholder="Tarifa" @onchange="OnFeeChanged">
                                @foreach (var item in Fees)
                                {
                                    <option value="@item.Id">@item.FeeType.Description (@item.RoomType.Description) - @item.FeeType.Currency.Sign @item.Amount</option>
                                }
                            </select>
                            <ValidationMessage For="() => RoomCheckIn.FeeId" />
                        </div>
                    </div>
                </div>
                <div class="row pb-2">
                    <div class="col-sm-12">
                        <div class="form-group">
                            <label for="paymentmethod">Método de Pago</label>
                            <select id="paymentmethod" class="form-control" placeholder="Método de Pago" @onchange="OnPaymentMethodChanged">
                                @foreach (var item in PaymentMethods)
                                {
                                    <option value="@item.Id">@item.Description</option>
                                }
                            </select>
                            <ValidationMessage For="() => RoomCheckIn.PaymentMethodId" />
                        </div>
                    </div>
                </div>
                @if (SelectedPaymentMethod.RequiresAmount)
                {
                    <div class="row pb-2">
                        <div class="col-sm-12">
                            <div class="form-group">
                                <label for="amount">Monto</label>
                                <InputNumber @bind-Value="RoomCheckIn.Amount" id="amount" class="form-control" placeholder="Monto" />
                                <ValidationMessage For="() => RoomCheckIn.Amount" />
                            </div>
                        </div>
                    </div>
                }
                @if (SelectedPaymentMethod.RequiresVoucherNumber)
                {
                    <div class="row pb-2">
                        <div class="col-sm-12">
                            <div class="form-group">
                                <label for="amount">Voucher</label>
                                <InputText @bind-Value="RoomCheckIn.VoucherNumber" id="amount" class="form-control" placeholder="# Voucher/Operación" />
                                <ValidationMessage For="() => RoomCheckIn.VoucherNumber" />
                            </div>
                        </div>
                    </div>
                }
                    <div class="row pb-2">
                        <div class="col-sm-12 text-end">
                            <h1>@SelectedFee.FeeType.Currency.Sign @(SelectedFee.Amount * RoomCheckIn.Nights)</h1>
                        </div>
                    </div>                
            </div>
        </div>
        <Button @ref="BackButton" Text="Regresar" Icon="c-icen cil-arrow-left" Type="Shared.Button.ButtonType.Button" OnClickCallback="BackAsync" />
        <Button @ref="SubmitButton" Text="Guardar" Icon="c-icon cil-save" Type="Shared.Button.ButtonType.Submit" />
    </Microsoft.AspNetCore.Components.Forms.EditForm>
</div>*@
<DialogForm @ref="DialogNewCustomer" Model="Guest" Title="Nuevo Huésped" ValidSubmitCallback="OnValidSubmitCustomerAsync">
    <MudSelect @bind-Value="Guest.DocumentTypeId" Label="Tipo Documento" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
        @foreach (var item in DocumentTypes)
        {
            <MudSelectItem Value="@item.Value">@item.Text</MudSelectItem>
        }
    </MudSelect>
    <MudTextField @bind-Value="Guest.Document" Label="Documento" Variant="Variant.Outlined" />
    <MudTextField @bind-Value="Guest.FirstName" Label="Nombres" Variant="Variant.Outlined" />
    <MudTextField @bind-Value="Guest.LastName" Label="Apellidos" Variant="Variant.Outlined" />
</DialogForm>

@*<ModalForm @ref="ModalNewCustomer" Model="Guest" Title="Nuevo Huésped" ValidSubmitCallback="OnValidSubmitCustomerAsync">
    <div class="row pb-2">
        <div class="col-sm-12">
            <div class="form-group">
                <label for="document_type">Tipo Documento</label>
                <InputSelect @bind-Value="Guest.DocumentTypeId" id="document_type" class="form-control" placeholder="Tipo Documento">
                    @foreach(var item in DocumentTypes)
                    {
                        <option value="@item.Value">@item.Text</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => Guest.DocumentTypeId" />
            </div>
        </div>
    </div>
    <div class="row pb-2">
        <div class="col-sm-12">
            <div class="form-group">
                <label for="document"></label>
                <InputText @bind-Value="Guest.Document" id="document" class="form-control" placeholder="Documento" />
                <ValidationMessage For="() => Guest.Document" />    
            </div>
        </div>
    </div>
    <div class="row pb-2">
        <div class="col-sm-12">
            <div class="form-group">
                <label for="first_name"></label>
                <InputText @bind-Value="Guest.FirstName" id="first_name" class="form-control" placeholder="Nombres" />
                <ValidationMessage For="() => Guest.FirstName" />    
            </div>
        </div>
    </div>
    <div class="row pb-2">
        <div class="col-sm-12">
            <div class="form-group">
                <label for="first_name"></label>
                <InputText @bind-Value="Guest.LastName" id="first_name" class="form-control" placeholder="Nombres" />
                <ValidationMessage For="() => Guest.FirstName" />
            </div>
        </div>
    </div>
</ModalForm>*@

@code {
    [Parameter]
    public Guid RoomId { get; set; }

    public ModalForm ModalNewCustomer { get; set;  }
    private DialogForm DialogNewCustomer;
    public Room Room { get; set; }
    public RoomCheckIn RoomCheckIn { get; set; }
    public PaymentMethod SelectedPaymentMethod { get; set; }
    public Fee SelectedFee { get; set; }
    public Guest Guest { get; set; }
    public ICollection<PaymentMethod> PaymentMethods { get; set; }
    public ICollection<Guest> Guests { get; set; }
    public ICollection<Guest> Companions { get; set; }
    public ICollection<Guest> SelectedCompanions { get; set; } = new List<Guest>() { };
    public ICollection<Fee> Fees { get; set; }
    public ICollection<SelectResource<Guid>> DocumentTypes { get; set; }
    public Shared.Button SubmitButton { get; set; }
    public Shared.Button BackButton { get; set; }

    private string ErrorMessage = null;
    private string AlertDisplayClass = "hide";
    private string AlertDisplayCss = "none;";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var current = DateTime.Now;
            if (current.Minute > 0 && current.Minute < 30)
            {
                current = current.AddMinutes(-current.Minute).AddMinutes(30);
            }
            else if (current.Minute >= 30)
            {
                current = current.AddMinutes(-current.Minute).AddHours(1);
            }
            var tomorrow = current.AddDays(1);
            RoomCheckIn = new RoomCheckIn() { EntryTime = current, RoomId = RoomId, ExitTime = tomorrow, Hour = tomorrow.Hour > 12 ? tomorrow.Hour - 12 : tomorrow.Hour == 0 ? 12 : tomorrow.Hour, Meridian = tomorrow.Hour > 11 ? 1 : 0, Nights = 1 };
            await Load();   
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    public async Task Load()
    {
        Room = await Http.GetFromJsonAsync<Room>(ApiRouteConfig.Management.Rooms.ROOM_ROUTE + "/" + RoomId);
        Companions = Guests = await Http.GetFromJsonAsync<Guest[]>(ApiRouteConfig.Management.Guests.GUEST_ROUTE);
        PaymentMethods = await Http.GetFromJsonAsync<PaymentMethod[]>(ApiRouteConfig.Payment.PAYMENT_METHOD_ROUTE + "?inDebt=false");
        Fees = await Http.GetFromJsonAsync<Fee[]>($"{ApiRouteConfig.Configuration.FEE_ROUTE}?roomTypeId={Room.RoomTypeId}");
        DocumentTypes = await Http.GetFromJsonAsync<SelectResource<Guid>[]>(ApiRouteConfig.Select.SELECT_ROUTE + "/tipos-de-documento");

        if(PaymentMethods.Any())
        {
            SelectedPaymentMethod = PaymentMethods.FirstOrDefault();
            RoomCheckIn.PaymentMethodId = PaymentMethods.Select(x => x.Id).FirstOrDefault();
        }
        if (Fees.Any())
        {
            SelectedFee = Fees.FirstOrDefault();
            RoomCheckIn.FeeId = Fees.Select(x => x.Id).FirstOrDefault();
        }
    }

    private async Task OnDateChanged(DateTime? dateTime)
    {
        if (dateTime.HasValue) 
        {
            RoomCheckIn.ExitTime = dateTime.Value;
            RoomCheckIn.Nights = (RoomCheckIn.ExitTime.Date - RoomCheckIn.EntryTime.Date).Days;
            StateHasChanged();
        }
    }

    private async Task OnNightsChanged(int nights)
    {
        RoomCheckIn.ExitTime = RoomCheckIn.EntryTime.AddDays(nights);
        StateHasChanged();
    }

    private async Task OnSearchChanged(ChangeEventArgs e)
    {
        Guests = await Http.GetFromJsonAsync<Guest[]>(ApiRouteConfig.Management.Guests.GUEST_ROUTE + "?search=" + e.Value.ToString());

        if (!string.IsNullOrEmpty(e.Value.ToString()))
        {
        }
    }

    private async Task OnSelectCompanionAsync()
    {
        var selectedCompanions = Companions
            .Where(x => RoomCheckIn.CompanionIds.Any(c => c == x.Id))
            .Concat(SelectedCompanions)
            .ToArray();
        SelectedCompanions = selectedCompanions;
        RoomCheckIn.SelectedCompanionIds = selectedCompanions
            .Select(x => x.Id)
            .ToArray();
        StateHasChanged();
    }

    private async Task OnClearCompanionsAsync()
    {
        var selectedCompanions = RoomCheckIn.SelectedCompanions.ToList();
        selectedCompanions.Clear();
        SelectedCompanions = selectedCompanions.ToArray();
        var selectedCompanionIds = RoomCheckIn.SelectedCompanionIds.ToList();
        selectedCompanionIds.Clear();
        RoomCheckIn.SelectedCompanionIds = selectedCompanionIds.ToArray();
    }

    private async Task OnSearch2Changed(ChangeEventArgs e)
    {
        Companions = await Http.GetFromJsonAsync<Guest[]>(ApiRouteConfig.Management.Guests.GUEST_ROUTE + "?search=" + e.Value.ToString());

        if (!string.IsNullOrEmpty(e.Value.ToString()))
        {
        }
    }

    private void OnPaymentMethodChanged(ChangeEventArgs e)
    {
        RoomCheckIn.PaymentMethodId = Guid.Parse(e.Value.ToString());
        SelectedPaymentMethod = PaymentMethods.First(x => x.Id == Guid.Parse(e.Value.ToString()));
    }

    private void OnFeeChanged(ChangeEventArgs e)
    {
        RoomCheckIn.FeeId = Guid.Parse(e.Value.ToString());
        SelectedFee = Fees.First(x => x.Id == Guid.Parse(e.Value.ToString()));
    }

    private async Task SaveAsync()
    {
        try
        {
            await Http.PostAsJsonAsync(ApiRouteConfig.Rack.CHECKIN_ROUTE, RoomCheckIn);
            Navigation.NavigateTo("/rack");
        }
        catch (Exception ex)
        {
            await ShowAlertAsync(ex.Message);
        }
    }

    private async Task OnValidSubmitAsync()
    {
        try
        {
            await CloseAlertAsync();
            await Http.PostAsJsonAsync(ApiRouteConfig.Rack.CHECKIN_ROUTE, RoomCheckIn);
            Navigation.NavigateTo("/rack");
        }
        catch(Exception ex)
        {
            await ShowAlertAsync(ex.Message);
        }
    }

    private async Task OnInvalidSubmitAsync()
    {
        await ShowAlertAsync("Valide los campos ingresados");
    }

    private async Task OnNewCustomerAsync()
    {
        Guest = new Guest();
        DialogNewCustomer.Open();
    }

    private async Task OnValidSubmitCustomerAsync()
    {
        try
        {
            RoomCheckIn.NewGuest = Guest.Document;
            await Http.PostAsJsonAsync(ApiRouteConfig.Management.Guests.GUEST_ROUTE, Guest);
            Companions = Guests = await Http.GetFromJsonAsync<Guest[]>(ApiRouteConfig.Management.Guests.GUEST_ROUTE);
            DialogNewCustomer.Close();
            StateHasChanged();
        }
        catch(Exception ex)
        {
        }
    }

    private async Task ShowAlertAsync(string message)
    {
        ErrorMessage = message;
        AlertDisplayCss = "block;";
        await Task.Delay(500);
        AlertDisplayClass = "show";
    }

    private async Task CloseAlertAsync()
    {
        ErrorMessage = null;
        AlertDisplayClass = "hide";
        await Task.Delay(1000);
        AlertDisplayCss = "none;";
    }

    private async Task BackAsync()
    {
        Navigation.NavigateTo("/rack");
    }
}
