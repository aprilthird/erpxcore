@page "/maestros/seguridad/niveles-de-permiso"
@using ERP.XCore.Entities.Models
@using ERP.XCore.Hotel.Shared.Helpers
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject HttpClient Http
@inject IDialogService DialogService

<PageTitle Typo="Typo.h3">Niveles de Permiso</PageTitle>

<MudPaper Elevation="1" Class="pa-4">
	<MudText Typo="Typo.h3">Niveles de Permiso</MudText>

	<MudDivider />

	<MudStack Row="true" Justify="Justify.FlexEnd" Class="mt-2">
		<MudButton Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" OnClick="() => ShowModalAsync(ModalType.New)">
			Nuevo
		</MudButton>
	</MudStack>

	<MudTable Items="@ItemsList" Hover="true" Breakpoint="Breakpoint.Sm" Loading="false" LoadingProgressColor="Color.Info" Filter="new Func<PermissionLevel, bool>(FilterFunc1)">
		<ToolBarContent>
			<MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
		</ToolBarContent>
		<HeaderContent>

			<MudTh>Descripción</MudTh>
			<MudTh>Acciones</MudTh>
		</HeaderContent>
		<RowTemplate>

			<MudTd>@context.Description</MudTd>
			<MudTd>
				<MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Warning" OnClick="() => ShowModalAsync(ModalType.Edit, context)" aria-label="edit"></MudIconButton>
				<MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => DeleteAsync(context)" aria-label="delete"></MudIconButton>
			</MudTd>
		</RowTemplate>
	</MudTable>
</MudPaper>

<ERP.XCore.Components.Components.Dialogs.DialogForm @ref="DialogForm" Model="PermissionLevel" Title="Formulario Prueba" ValidSubmitCallback="SaveAsync" InvalidSubmitCallback="ShowError">
	<ERP.XCore.Hotel.Web.Client.Pages.Management.Security.PermissionLevel.Fields @ref="Fields" PermissionLevel="PermissionLevel" />
</ERP.XCore.Components.Components.Dialogs.DialogForm>

<MudDialog @bind-IsVisible="ShowModalTest" Options="DialogOptions">
	<TitleContent>
		<MudText Typo="Typo.h6">
			<MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3" /> Edit rating
		</MudText>
	</TitleContent>
	<DialogContent>
		<MudForm>
			<ERP.XCore.Hotel.Web.Client.Pages.Management.Security.PermissionLevel.Fields @ref="Fields" PermissionLevel="PermissionLevel" />
		</MudForm>
	</DialogContent>
	<DialogActions>
		<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => { ShowModalTest = false; }" Class="px-10">Close</MudButton>
	</DialogActions>
</MudDialog>

<ModalForm @ref="Modal" Title="@ModalTitle" Model="PermissionLevel" ValidSubmitCallback="SaveAsync" InvalidSubmitCallback="ShowError">
    <ERP.XCore.Hotel.Web.Client.Pages.Management.Security.PermissionLevel.Fields @ref="Fields" PermissionLevel="PermissionLevel" />
</ModalForm>

@code {
	private PermissionLevel PermissionLevel = new PermissionLevel();
	private ModalForm Modal;
	private ERP.XCore.Components.Components.Dialogs.DialogForm DialogForm;
	private Fields Fields;
	private string ModalTitle;
	private PermissionLevel[]? ItemsList;
	private string searchString1 = "";
	private bool ShowModalTest = false;
	private DialogOptions DialogOptions = new() { FullWidth = true };
	public enum ModalType
	{
		New, Edit
	};

	protected override async Task OnInitializedAsync()
	{
		try
		{
			await Load();
		}
		catch (AccessTokenNotAvailableException exception)
		{
			exception.Redirect();
		}
	}

	public async Task Load()
	{
		ItemsList = await Http.GetFromJsonAsync<PermissionLevel[]>(ApiRouteConfig.Management.Security.PERMISSIONLEVEL_ROUTE);
	}

	public async Task ShowModalAsync(ModalType modalType, PermissionLevel pl = null)
	{
		DialogForm.Open();
		ModalTitle = $"{(pl == null ? "Nuevo" : "Editor")} Cliente";
		PermissionLevel = pl ?? new();
	}

	private bool FilterFunc1(PermissionLevel per) => FilterFunc(per, searchString1);

	private bool FilterFunc(PermissionLevel per, string searchString)
	{
		if (string.IsNullOrWhiteSpace(searchString))
			return true;
		if (per.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;

		return false;
	}

	public async Task SaveAsync()
	{
		try
		{
			if(PermissionLevel.Id == Guid.Empty)
			{
				await Http.PostAsJsonAsync(ApiRouteConfig.Management.Security.PERMISSIONLEVEL_ROUTE, PermissionLevel);
			}
			else
			{
				await Http.PutAsJsonAsync(ApiRouteConfig.Management.Security.PERMISSIONLEVEL_ROUTE + "/" + PermissionLevel.Id, PermissionLevel);
			}
			await Load();
			await Modal.CloseAsync();
		}
		catch(Exception ex)
		{

		}
	}

	public void ShowError()
	{
	}

	public async Task DeleteAsync(PermissionLevel pl)
	{
		var result = await DialogService.ShowDeleteConfirmAsync();
		if (result)
		{
			await Http.DeleteAsync(ApiRouteConfig.Management.Security.PERMISSIONLEVEL_ROUTE + "/" + pl.Id);
			await Load();
		}
	}
}
