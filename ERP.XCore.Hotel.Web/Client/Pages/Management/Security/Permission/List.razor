@page "/maestros/seguridad/permiso"
@using ERP.XCore.Entities.Models
@using ERP.XCore.Hotel.Shared.Helpers
@using ERP.XCore.Hotel.Shared.Resources.Base
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Text.Json

@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<div class="row px-5">
<div class="d-flex justify-content-between">
	<h3>Permiso</h3>
	<button class="btn btn-primary" @onclick="() => ShowModalAsync(ModalType.New)">
		<i class="fa fa-add"></i>
		<span>Agregar</span>
	</button>
</div>
<div class="col-md-12" style="
      height: 600px;
      overflow: scroll;
    ">
		<div class="table-responsive">
			<MudTable Items="@ItemsList" Hover="true" Breakpoint="Breakpoint.Sm" Loading="false" LoadingProgressColor="Color.Info" Filter="new Func<Permission, bool>(FilterFunc1)">
				<ToolBarContent>
					<MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
				</ToolBarContent>
				<HeaderContent>
				
						<MudTh>Rol</MudTh>
						<MudTh>SubMódulo</MudTh>
						<MudTh>Permiso</MudTh>
						<MudTh>Acciones</MudTh>
			</HeaderContent>
			<RowTemplate>
				
							<MudTd>@context.Role.Name</MudTd>
							<MudTd>@context.SubModule.Description</MudTd>
							<MudTd>@context.PermissionLevel.Description</MudTd>
							<MudTd>
								<button class="btn btn-info" @onclick="() => ShowModalAsync(ModalType.Edit, context)">
									<i class="fa fa-edit"></i>
									<span>Editar</span>
								</button>
								<button class="btn btn-danger" @onclick="() => DeleteAsync(context)">
									<i class="fa fa-trash"></i>
									<span>Eliminar</span>
								</button>
							</MudTd>
			</RowTemplate>
		</MudTable>


		</div>
	</div>
</div>
<ModalForm @ref="Modal" Title="@ModalTitle" Model="Permission" ValidSubmitCallback="SaveAsync" InvalidSubmitCallback="ShowError">
    <Fields @ref="Fields" Permission="Permission" Roles="Roles" SubModules="SubModules" PermissionLevels="PermissionLevels" />
</ModalForm>

@code {
	private Permission Permission = new Permission();
	private ModalForm Modal;
	private Fields Fields;
	private string ModalTitle;
	private Permission[]? ItemsList;
	private string searchString1 = "";
	private SelectResource<Guid>[]? Roles;
	private SelectResource<Guid>[]? SubModules;
	private SelectResource<Guid>[]? PermissionLevels;

	public enum ModalType
	{
		New, Edit
	};

	protected override async Task OnInitializedAsync()
	{
		try
		{
			await Load();
			await LoadSelects();
		}
		catch (AccessTokenNotAvailableException exception)
		{
			exception.Redirect();
		}
	}

	public async Task LoadSelects()
	{
		SubModules = await Http.GetFromJsonAsync<SelectResource<Guid>[]>(RouteConfig.Select.SELECT_ROUTE + "/submodulos");
		PermissionLevels = await Http.GetFromJsonAsync<SelectResource<Guid>[]>(RouteConfig.Select.SELECT_ROUTE + "/niveles-de-permiso");
		Roles = await Http.GetFromJsonAsync<SelectResource<Guid>[]>(RouteConfig.Select.SELECT_ROUTE + "/roles");
	}

	public async Task Load()
	{
		ItemsList = await Http.GetFromJsonAsync<Permission[]>(RouteConfig.Management.Security.PERMISSION_ROUTE);
	}

	public async Task ShowModalAsync(ModalType modalType, Permission permission = null)
	{
		ModalTitle = $"{(modalType == ModalType.New ? "Nuevo" : "Editar")} Permiso";
		Permission = permission ?? new Permission();
		await Modal.OpenAsync();
	}

	private bool FilterFunc1(Permission permission) => FilterFunc(permission, searchString1);

	private bool FilterFunc(Permission permission, string searchString)
	{
		if (string.IsNullOrWhiteSpace(searchString))
			return true;
		if (!string.IsNullOrWhiteSpace(permission.Role.Name) && permission.Role.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		if (!string.IsNullOrWhiteSpace(permission.PermissionLevel.Description) &&permission.PermissionLevel.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		if (!string.IsNullOrWhiteSpace(permission.SubModule.Description) && permission.SubModule.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		return false;
	}

	public async Task SaveAsync()
	{
		try
		{
			if (Permission.Id == Guid.Empty)
			{
				await Http.PostAsJsonAsync(RouteConfig.Management.Security.PERMISSION_ROUTE, Permission);
			}
			else
			{
				await Http.PutAsJsonAsync(RouteConfig.Management.Security.PERMISSION_ROUTE + "/" + Permission.Id, Permission);
			}
			await Load();
			await Modal.CloseAsync();
		}
		catch(Exception ex)
		{

		}
	}

	public void ShowError()
	{
	}

	public async Task DeleteAsync(Permission permission)
	{
		await Http.DeleteAsync(RouteConfig.Management.Security.PERMISSION_ROUTE + "/" + permission.Id);
		await Load();
    }
}
