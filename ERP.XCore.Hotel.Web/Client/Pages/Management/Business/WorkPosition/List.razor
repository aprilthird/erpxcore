@page "/maestros/empresas/area"
@using ERP.XCore.Entities.Models
@using ERP.XCore.Hotel.Shared.Helpers
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject HttpClient Http

<div class="row px-5">
	<div class="d-flex justify-content-between">
		<h3>Cargo</h3>
		<button class="btn btn-primary" @onclick="() => ShowModalAsync(ModalType.New)">
			<i class="fa fa-add"></i>
			<span>Agregar</span>
		</button>
	</div>
	<div class="col-md-12">
		<div class="table-responsive">
        <MudTable Items="@ItemsList" Hover="true" Breakpoint="Breakpoint.Sm" Loading="false" LoadingProgressColor="Color.Info" Filter="new Func<WorkPosition, bool>(FilterFunc1)">
				<ToolBarContent>
					<MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
				</ToolBarContent>
				<HeaderContent>
						<MudTh>Descrípción</MudTh>
						<MudTh>Acciones</MudTh>
			</HeaderContent>
			<RowTemplate>
							<MudTd>@context.Description</MudTd>
							<MudTd>
								<button class="btn btn-info" @onclick="() => ShowModalAsync(ModalType.Edit, context)">
									<i class="fa fa-edit"></i>
									<span>Editar</span>
								</button>
								<button class="btn btn-danger" @onclick="() => DeleteAsync(context)">
									<i class="fa fa-trash"></i>
									<span>Eliminar</span>
								</button>
							</MudTd>
			</RowTemplate>
		</MudTable>
		</div>
	</div>
</div>

<ModalForm @ref="Modal" Title="@ModalTitle" Model="WorkPosition" ValidSubmitCallback="SaveAsync" InvalidSubmitCallback="ShowError">
    <Fields @ref="Fields" WorkPosition="WorkPosition" />
</ModalForm>

@code {
	private WorkPosition WorkPosition = new WorkPosition();
	private ModalForm Modal;
	private Fields Fields;
	private string ModalTitle;
	private WorkPosition[]? ItemsList;
	private string searchString1 = "";
	public enum ModalType
	{
		New, Edit
	};

	protected override async Task OnInitializedAsync()
	{
		try
		{
			await Load();
		}
		catch (AccessTokenNotAvailableException exception)
		{
			exception.Redirect();
		}
	}

	public async Task Load()
	{
		ItemsList = await Http.GetFromJsonAsync<WorkPosition[]>(RouteConfig.Management.Business.WORK_POSITION_ROUTE);
	}

	public async Task ShowModalAsync(ModalType modalType, WorkPosition workPosition = null)
	{
		ModalTitle = $"{(modalType == ModalType.New ? "Nuevo" : "Editar")} Cargo";
		WorkPosition = workPosition ?? new WorkPosition();
		await Modal.OpenAsync();
	}

	private bool FilterFunc1(WorkPosition work) => FilterFunc(work, searchString1);

	private bool FilterFunc(WorkPosition work, string searchString)
	{
		if (string.IsNullOrWhiteSpace(searchString))
			return true;
		if (work.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		

		return false;
	}

	public async Task SaveAsync()
	{
		try
		{
			if(WorkPosition.Id == Guid.Empty)
			{
				await Http.PostAsJsonAsync(RouteConfig.Management.Business.WORK_POSITION_ROUTE, WorkPosition);
			}
			else
			{
				await Http.PutAsJsonAsync(RouteConfig.Management.Business.WORK_POSITION_ROUTE + "/" + WorkPosition.Id, WorkPosition);
			}
			await Load();
			await Modal.CloseAsync();
		}
		catch(Exception ex)
		{

		}
	}

	public void ShowError()
	{
	}

	public async Task DeleteAsync(WorkPosition workPosition)
	{
		await Http.DeleteAsync(RouteConfig.Management.Business.WORK_POSITION_ROUTE + "/" + workPosition.Id);
		await Load();
    }
}

